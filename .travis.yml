dist: trusty

sudo: required

addon_shortcuts:
  xcode64: &xcode64
    apt:
      packages:

  clang38: &clang38
    apt:
      sources:
        - llvm-toolchain-trusty-3.8
        - ubuntu-toolchain-r-test
        - llvm-toolchain-precise
      packages:
        - clang-3.8
        - libc++-dev

  clang39: &clang39
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - clang-3.9
        - g++-arm-linux-gnueabi
        - g++-multilib
        - gcc-multilib
        - qemu
        - qemu-system-arm

  clang50: &clang50
    apt:
      sources:
        - llvm-toolchain-trusty-5.0
        - ubuntu-toolchain-r-test
        - llvm-toolchain-precise
      packages:
        - clang-5.0
        - libc++-dev

  clang60: &clang60
    apt:
      sources:
        - llvm-toolchain-trusty-6.0
        - ubuntu-toolchain-r-test
        - llvm-toolchain-precise
      packages:
        - clang-6.0
        - libc++-dev

  gcc48: &gcc48
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-4.8

  gcc6: &gcc6
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-6

  gcc7: &gcc7
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-7

  gcc8: &gcc8
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-8

addons:
  apt:
    update: true
    packages:
      - cmake

matrix:
  include:
    # - { env: 'CXX=g++-4.8 CMAKE_OPTIONS="-DCXXSTD=11"', addons: *gcc48 }
    # - { env: 'CXX=g++-6 CMAKE_OPTIONS="-DCXXSTD=11"', addons: *gcc6 }
    # - { env: 'CXX=g++-6 CXXFLAGS="-DJSONCONS_NO_DEPRECATED" CMAKE_OPTIONS="-DCXXSTD=11"', addons: *gcc6 }
    # - { env: 'CXX=g++-7 CMAKE_OPTIONS="-DCXXSTD=11"', addons: *gcc7 }
    # - { env: 'CXX=g++-7 CXXFLAGS="-DJSONCONS_NO_DEPRECATED" CMAKE_OPTIONS="-DCXXSTD=11"', addons: *gcc7 }
    # - { env: 'CXX=g++-8 CMAKE_OPTIONS="-DCXXSTD=17"', addons: *gcc8 }
    # - { env: 'CXX=g++-8 CXXFLAGS="-DJSONCONS_NO_DEPRECATED" CMAKE_OPTIONS="-DCXXSTD=17"', addons: *gcc8 }
    # - { env: 'CXX=clang++-3.8 CMAKE_OPTIONS="-DCXXSTD=11"', addons: *clang38 }
     - { env: 'CXX=clang++-3.9  CROSS_COMPILE=1 ARM_ARCH_DIR=arm-linux-gnueabi GCC_VER=4.7.3 ARM_SETTINGS="armv7-a -mfpu=neon -mfloat-abi=softfp -target arm-linux-gnueabi"', addons: *clang39 }
    # - { env: 'CXX=clang++-5.0 CMAKE_OPTIONS="-DCXXSTD=11"', addons: *clang50 }
    # - { env: 'CXX=clang++-6.0 CMAKE_OPTIONS="-DCXXSTD=11"', addons: *clang60 }
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode6.4'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode7.3'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode8'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode8.1'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode8.2'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode8.3'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode9'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode9.1'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode9.2'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode9.3'}
    # - { env: 'CXX=clang++ CMAKE_OPTIONS="-DCXXSTD=11"', compiler: clang, osx_image: xcode9.4'}

env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - curl -L http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
    - echo 'deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.8 main' | sudo tee /etc/apt/sources.list

install:
    - cd tests/build/cmake
    # Define the version of miniconda to download
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # Useful for debugging any issues with conda
    - conda info -a
    - conda install gtest cmake -c conda-forge
    - if [[ "$ENABLE_XTL_COMPLEX" == 1 ]] ; then
        conda install xtl -c quantstack ;
      fi
    - if [[ "$CROSS_COMPILE" == 1 ]] ; then
        if [[ "$ARM_ARCH_DIR" == "aarch64-linux-gnu" ]] ; then
          mkdir $HOME/linker_bin ;
          ln -s /usr/bin/aarch64-linux-gnu-ld $HOME/linker_bin/ld ;
          echo "SETTING GNU LINKER DIR" ;
          ls -al $HOME/linker_bin/ld ;
          cmake . -DBUILD_TESTS=ON -DCROSS_COMPILE_ARM=ON -DDOWNLOAD_GTEST=ON -DARM_ARCH_DIRECTORY="$ARM_ARCH_DIR" -DARM_GCC_VER="$GCC_VER" -DTARGET_ARCH="$ARM_SETTINGS --prefix=$HOME/linker_bin/" ;
        else
          cmake . -DBUILD_TESTS=ON -DCROSS_COMPILE_ARM=ON -DDOWNLOAD_GTEST=ON -DARM_ARCH_DIRECTORY="$ARM_ARCH_DIR" -DARM_GCC_VER="$GCC_VER" -DTARGET_ARCH="$ARM_SETTINGS" ;
        fi
      elif [[ "$ENABLE_FALLBACK" == 1 ]] ; then
        cmake -DBUILD_TESTS=ON -DENABLE_FALLBACK=ON -DENABLE_XTL_COMPLEX=ON . ;
      elif [[ "$ENABLE_XTL_COMPLEX" == 1 ]] ; then
        cmake -DBUILD_TESTS=ON -DENABLE_XTL_COMPLEX=ON . ;
      elif [[ "$AVX512" == 1 ]] ; then
        conda install gcc_linux-64 gxx_linux-64;
        sh install_sde.sh ;
        export PATH="$HOME/miniconda/bin:$PATH" ;
        export CC=x86_64-conda_cos6-linux-gnu-gcc CXX=x86_64-conda_cos6-linux-gnu-g++ ;
        which $CXX ;
        cmake . -DBUILD_TESTS=ON -DTARGET_ARCH=skylake-avx512 -DCMAKE_INSTALL_PREFIX=$HOME/miniconda -DDOWNLOAD_GTEST=ON ;
      else
        cmake . -DBUILD_TESTS=ON ${CMAKE_OPTIONS};
      fi
    - make -j2 jsoncons_tests

script:
  - if [[ "$CROSS_COMPILE" == 1 ]]; then
      if [[ "$ARM_ARCH_DIR" == "aarch64-linux-gnu" ]]; then
        qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./jsoncons_tests ;
      else
        qemu-arm -L /usr/arm-linux-gnueabi/ ./jsoncons_tests ;
      fi
    elif [[ "$AVX512" == 1 ]] ; then
      uname -m ;
      ../intel-sde-downloader/sde-external-8.16.0-2018-01-30-lin/sde64 -cnl -- ./jsoncons_tests ;
    else
      cmake . ${CMAKE_OPTIONS};
      cmake --build . --config Release;
      ctest -C Release -V -j;
    fi

